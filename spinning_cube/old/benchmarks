/*
    std::chrono::time_point<std::chrono::high_resolution_clock> tp_start, tp_end;
    long start, end;

    // delta time with floats

    deltaTimeInit();

    tp_start = std::chrono::high_resolution_clock::now();

    for (int n=0; n<1000000; n++) {
        deltaTimeUpdate();
    }

    tp_end = std::chrono::high_resolution_clock::now();

    start = std::chrono::time_point_cast<std::chrono::microseconds>(tp_start).time_since_epoch().count();
    end = std::chrono::time_point_cast<std::chrono::microseconds>(tp_end).time_since_epoch().count();
    std::cout << "deltaTime 1000000 iterations with floats " << (end - start) / 1000 << "ms" << std::endl;





    // delta time with Uint64

    Uint64 timeLast = 0;
    Uint64 timeNow = SDL_GetPerformanceCounter();
    double timeFrequencyReciprocal = SDL_GetPerformanceFrequency();
    timeFrequencyReciprocal = 1.0f / timeFrequencyReciprocal;
    float deltaTime = 0;

    tp_start = std::chrono::high_resolution_clock::now();

    for (int n=0; n<1000000; n++) {
        timeLast = timeNow;
        timeNow = SDL_GetPerformanceCounter();
        deltaTime = (float)((timeNow - timeLast) * timeFrequencyReciprocal);
    }

    tp_end = std::chrono::high_resolution_clock::now();

    start = std::chrono::time_point_cast<std::chrono::microseconds>(tp_start).time_since_epoch().count();
    end = std::chrono::time_point_cast<std::chrono::microseconds>(tp_end).time_since_epoch().count();
    std::cout << "deltaTime 1000000 iterations with Uint64 " << (end - start) / 1000 << "ms" << std::endl;
*/
